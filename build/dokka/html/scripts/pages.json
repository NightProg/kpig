[{"name":"abstract fun parse(s: String): T","description":"Parse.parse","location":"kpig/[root]/-parse/parse.html","searchKeys":["parse","abstract fun parse(s: String): T","Parse.parse"]},{"name":"class ParseException(val loc: Location, val problem: IntRange, val message: String) : Exception","description":"ParseException","location":"kpig/[root]/-parse-exception/index.html","searchKeys":["ParseException","class ParseException(val loc: Location, val problem: IntRange, val message: String) : Exception","ParseException"]},{"name":"class ParseFn<T>(val f: ParseFunc<T>, val name: String? = null, val canBeIgnored: Boolean = false)","description":"ParseFn","location":"kpig/[root]/-parse-fn/index.html","searchKeys":["ParseFn","class ParseFn<T>(val f: ParseFunc<T>, val name: String? = null, val canBeIgnored: Boolean = false)","ParseFn"]},{"name":"class Parser(var source: Source)","description":"Parser","location":"kpig/[root]/-parser/index.html","searchKeys":["Parser","class Parser(var source: Source)","Parser"]},{"name":"constructor(content: String, currentPos: Int = 0, whitespace: MutableList<Char> = mutableListOf())","description":"Source.Source","location":"kpig/[root]/-source/-source.html","searchKeys":["Source","constructor(content: String, currentPos: Int = 0, whitespace: MutableList<Char> = mutableListOf())","Source.Source"]},{"name":"constructor(f: ParseFunc<T>, name: String? = null, canBeIgnored: Boolean = false)","description":"ParseFn.ParseFn","location":"kpig/[root]/-parse-fn/-parse-fn.html","searchKeys":["ParseFn","constructor(f: ParseFunc<T>, name: String? = null, canBeIgnored: Boolean = false)","ParseFn.ParseFn"]},{"name":"constructor(loc: Location, problem: IntRange, message: String)","description":"ParseException.ParseException","location":"kpig/[root]/-parse-exception/-parse-exception.html","searchKeys":["ParseException","constructor(loc: Location, problem: IntRange, message: String)","ParseException.ParseException"]},{"name":"constructor(range: IntRange, lexeme: String, source: Source)","description":"Location.Location","location":"kpig/[root]/-location/-location.html","searchKeys":["Location","constructor(range: IntRange, lexeme: String, source: Source)","Location.Location"]},{"name":"constructor(source: Source)","description":"Parser.Parser","location":"kpig/[root]/-parser/-parser.html","searchKeys":["Parser","constructor(source: Source)","Parser.Parser"]},{"name":"data class Location(val range: IntRange, val lexeme: String, val source: Source)","description":"Location","location":"kpig/[root]/-location/index.html","searchKeys":["Location","data class Location(val range: IntRange, val lexeme: String, val source: Source)","Location"]},{"name":"data class Source(val content: String, var currentPos: Int = 0, whitespace: MutableList<Char> = mutableListOf())","description":"Source","location":"kpig/[root]/-source/index.html","searchKeys":["Source","data class Source(val content: String, var currentPos: Int = 0, whitespace: MutableList<Char> = mutableListOf())","Source"]},{"name":"fun <T> choices(vararg f: ParseFn<T>): ParseFn<T>","description":"Parser.choices","location":"kpig/[root]/-parser/choices.html","searchKeys":["choices","fun <T> choices(vararg f: ParseFn<T>): ParseFn<T>","Parser.choices"]},{"name":"fun <T> many(f: ParseFn<T>, min: Int = 0, max: Int = -1): ParseFn<List<T>>","description":"Parser.many","location":"kpig/[root]/-parser/many.html","searchKeys":["many","fun <T> many(f: ParseFn<T>, min: Int = 0, max: Int = -1): ParseFn<List<T>>","Parser.many"]},{"name":"fun <T> rec(f: (ParseFn<T>) -> ParseFn<T>): ParseFn<T>","description":"Parser.rec","location":"kpig/[root]/-parser/rec.html","searchKeys":["rec","fun <T> rec(f: (ParseFn<T>) -> ParseFn<T>): ParseFn<T>","Parser.rec"]},{"name":"fun <T> seq(vararg f: ParseFn<T>): ParseFn<List<T>>","description":"Parser.seq","location":"kpig/[root]/-parser/seq.html","searchKeys":["seq","fun <T> seq(vararg f: ParseFn<T>): ParseFn<List<T>>","Parser.seq"]},{"name":"fun <T> syntax(rule: Parser.() -> ParseFn<T>): Parse<T>","description":"syntax","location":"kpig/[root]/syntax.html","searchKeys":["syntax","fun <T> syntax(rule: Parser.() -> ParseFn<T>): Parse<T>","syntax"]},{"name":"fun addWhitespace(ws: Char): Boolean","description":"Source.addWhitespace","location":"kpig/[root]/-source/add-whitespace.html","searchKeys":["addWhitespace","fun addWhitespace(ws: Char): Boolean","Source.addWhitespace"]},{"name":"fun advance(i: Int): Char?","description":"Source.advance","location":"kpig/[root]/-source/advance.html","searchKeys":["advance","fun advance(i: Int): Char?","Source.advance"]},{"name":"fun column(): Int","description":"Source.column","location":"kpig/[root]/-source/column.html","searchKeys":["column","fun column(): Int","Source.column"]},{"name":"fun copy(): Source","description":"Source.copy","location":"kpig/[root]/-source/copy.html","searchKeys":["copy","fun copy(): Source","Source.copy"]},{"name":"fun eof(): Boolean","description":"Source.eof","location":"kpig/[root]/-source/--eof--.html","searchKeys":["eof","fun eof(): Boolean","Source.eof"]},{"name":"fun formatError(loc: Location, problem: IntRange, message: String): String","description":"ParseException.Companion.formatError","location":"kpig/[root]/-parse-exception/-companion/format-error.html","searchKeys":["formatError","fun formatError(loc: Location, problem: IntRange, message: String): String","ParseException.Companion.formatError"]},{"name":"fun getCurrentLine(): String","description":"Location.getCurrentLine","location":"kpig/[root]/-location/get-current-line.html","searchKeys":["getCurrentLine","fun getCurrentLine(): String","Location.getCurrentLine"]},{"name":"fun getWhitespace(): MutableList<Char>","description":"Source.getWhitespace","location":"kpig/[root]/-source/get-whitespace.html","searchKeys":["getWhitespace","fun getWhitespace(): MutableList<Char>","Source.getWhitespace"]},{"name":"fun line(): Int","description":"Source.line","location":"kpig/[root]/-source/line.html","searchKeys":["line","fun line(): Int","Source.line"]},{"name":"fun lines(): List<String>","description":"Source.lines","location":"kpig/[root]/-source/lines.html","searchKeys":["lines","fun lines(): List<String>","Source.lines"]},{"name":"fun location(newSource: Source): Location","description":"Source.location","location":"kpig/[root]/-source/location.html","searchKeys":["location","fun location(newSource: Source): Location","Source.location"]},{"name":"fun main()","description":"main","location":"kpig/[root]/main.html","searchKeys":["main","fun main()","main"]},{"name":"fun optional(defaultValue: T? = null): ParseFn<T?>","description":"ParseFn.optional","location":"kpig/[root]/-parse-fn/optional.html","searchKeys":["optional","fun optional(defaultValue: T? = null): ParseFn<T?>","ParseFn.optional"]},{"name":"fun peek(): Char?","description":"Source.peek","location":"kpig/[root]/-source/peek.html","searchKeys":["peek","fun peek(): Char?","Source.peek"]},{"name":"fun regex(regex: String): ParseFn<Location>","description":"Parser.regex","location":"kpig/[root]/-parser/regex.html","searchKeys":["regex","fun regex(regex: String): ParseFn<Location>","Parser.regex"]},{"name":"fun save(): Source","description":"Source.save","location":"kpig/[root]/-source/save.html","searchKeys":["save","fun save(): Source","Source.save"]},{"name":"fun tag(v: String): ParseFn<Location>","description":"Parser.tag","location":"kpig/[root]/-parser/tag.html","searchKeys":["tag","fun tag(v: String): ParseFn<Location>","Parser.tag"]},{"name":"fun whitespace(vararg w: Char)","description":"Parser.whitespace","location":"kpig/[root]/-parser/whitespace.html","searchKeys":["whitespace","fun whitespace(vararg w: Char)","Parser.whitespace"]},{"name":"infix fun <R> map(f: (T) -> R): ParseFn<R>","description":"ParseFn.map","location":"kpig/[root]/-parse-fn/map.html","searchKeys":["map","infix fun <R> map(f: (T) -> R): ParseFn<R>","ParseFn.map"]},{"name":"infix fun <R> rthen(f: ParseFn<R>): ParseFn<R>","description":"ParseFn.rthen","location":"kpig/[root]/-parse-fn/rthen.html","searchKeys":["rthen","infix fun <R> rthen(f: ParseFn<R>): ParseFn<R>","ParseFn.rthen"]},{"name":"infix fun <R> then(f: ParseFn<R>): ParseFn<Pair<T, R>>","description":"ParseFn.then","location":"kpig/[root]/-parse-fn/then.html","searchKeys":["then","infix fun <R> then(f: ParseFn<R>): ParseFn<Pair<T, R>>","ParseFn.then"]},{"name":"infix fun <R> thenIgnore(f: ParseFn<R>): ParseFn<T>","description":"ParseFn.thenIgnore","location":"kpig/[root]/-parse-fn/then-ignore.html","searchKeys":["thenIgnore","infix fun <R> thenIgnore(f: ParseFn<R>): ParseFn<T>","ParseFn.thenIgnore"]},{"name":"infix fun catch(f: (ParseException) -> T): ParseFn<T>","description":"ParseFn.catch","location":"kpig/[root]/-parse-fn/catch.html","searchKeys":["catch","infix fun catch(f: (ParseException) -> T): ParseFn<T>","ParseFn.catch"]},{"name":"infix fun named(name: String): ParseFn<T>","description":"ParseFn.named","location":"kpig/[root]/-parse-fn/named.html","searchKeys":["named","infix fun named(name: String): ParseFn<T>","ParseFn.named"]},{"name":"infix fun or(f: ParseFn<T>): ParseFn<T>","description":"ParseFn.or","location":"kpig/[root]/-parse-fn/or.html","searchKeys":["or","infix fun or(f: ParseFn<T>): ParseFn<T>","ParseFn.or"]},{"name":"interface Parse<T>","description":"Parse","location":"kpig/[root]/-parse/index.html","searchKeys":["Parse","interface Parse<T>","Parse"]},{"name":"object Companion","description":"ParseException.Companion","location":"kpig/[root]/-parse-exception/-companion/index.html","searchKeys":["Companion","object Companion","ParseException.Companion"]},{"name":"open fun <E : Exception> mapError(f: (ParseException) -> Exception): Parse<T>","description":"Parse.mapError","location":"kpig/[root]/-parse/map-error.html","searchKeys":["mapError","open fun <E : Exception> mapError(f: (ParseException) -> Exception): Parse<T>","Parse.mapError"]},{"name":"open fun map(f: (T) -> T): Parse<T>","description":"Parse.map","location":"kpig/[root]/-parse/map.html","searchKeys":["map","open fun map(f: (T) -> T): Parse<T>","Parse.map"]},{"name":"open fun parseAsPair(s: String): Pair<T?, ParseException?>","description":"Parse.parseAsPair","location":"kpig/[root]/-parse/parse-as-pair.html","searchKeys":["parseAsPair","open fun parseAsPair(s: String): Pair<T?, ParseException?>","Parse.parseAsPair"]},{"name":"open fun parseOrNull(s: String): T?","description":"Parse.parseOrNull","location":"kpig/[root]/-parse/parse-or-null.html","searchKeys":["parseOrNull","open fun parseOrNull(s: String): T?","Parse.parseOrNull"]},{"name":"open fun parseWithLocation(s: String): Pair<T?, Location>","description":"Parse.parseWithLocation","location":"kpig/[root]/-parse/parse-with-location.html","searchKeys":["parseWithLocation","open fun parseWithLocation(s: String): Pair<T?, Location>","Parse.parseWithLocation"]},{"name":"open override val message: String","description":"ParseException.message","location":"kpig/[root]/-parse-exception/message.html","searchKeys":["message","open override val message: String","ParseException.message"]},{"name":"operator fun invoke(parser: Parser): T","description":"ParseFn.invoke","location":"kpig/[root]/-parse-fn/invoke.html","searchKeys":["invoke","operator fun invoke(parser: Parser): T","ParseFn.invoke"]},{"name":"typealias ParseFunc<T> = Parser.() -> T","description":"ParseFunc","location":"kpig/[root]/-parse-func/index.html","searchKeys":["ParseFunc","typealias ParseFunc<T> = Parser.() -> T","ParseFunc"]},{"name":"val canBeIgnored: Boolean = false","description":"ParseFn.canBeIgnored","location":"kpig/[root]/-parse-fn/can-be-ignored.html","searchKeys":["canBeIgnored","val canBeIgnored: Boolean = false","ParseFn.canBeIgnored"]},{"name":"val content: String","description":"Source.content","location":"kpig/[root]/-source/content.html","searchKeys":["content","val content: String","Source.content"]},{"name":"val f: ParseFunc<T>","description":"ParseFn.f","location":"kpig/[root]/-parse-fn/f.html","searchKeys":["f","val f: ParseFunc<T>","ParseFn.f"]},{"name":"val lexeme: String","description":"Location.lexeme","location":"kpig/[root]/-location/lexeme.html","searchKeys":["lexeme","val lexeme: String","Location.lexeme"]},{"name":"val loc: Location","description":"ParseException.loc","location":"kpig/[root]/-parse-exception/loc.html","searchKeys":["loc","val loc: Location","ParseException.loc"]},{"name":"val name: String? = null","description":"ParseFn.name","location":"kpig/[root]/-parse-fn/name.html","searchKeys":["name","val name: String? = null","ParseFn.name"]},{"name":"val problem: IntRange","description":"ParseException.problem","location":"kpig/[root]/-parse-exception/problem.html","searchKeys":["problem","val problem: IntRange","ParseException.problem"]},{"name":"val range: IntRange","description":"Location.range","location":"kpig/[root]/-location/range.html","searchKeys":["range","val range: IntRange","Location.range"]},{"name":"val source: Source","description":"Location.source","location":"kpig/[root]/-location/source.html","searchKeys":["source","val source: Source","Location.source"]},{"name":"var currentPos: Int","description":"Source.currentPos","location":"kpig/[root]/-source/current-pos.html","searchKeys":["currentPos","var currentPos: Int","Source.currentPos"]},{"name":"var source: Source","description":"Parser.source","location":"kpig/[root]/-parser/source.html","searchKeys":["source","var source: Source","Parser.source"]}]
